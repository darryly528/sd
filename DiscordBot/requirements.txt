import discord
from discord import app_commands
from discord.ext import commands
import os
import json
import asyncio
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv('TOKEN')

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

USERNAMES_FILE = "usernames.json"

def load_usernames():
    try:
        with open(USERNAMES_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_usernames(data):
    with open(USERNAMES_FILE, "w") as f:
        json.dump(data, f, indent=4)

@bot.event
async def on_ready():
    await tree.sync()
    print(f"Logged in as {bot.user} (ID: {bot.user.id})")
    print("------")

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    content_lower = message.content.lower()
    if "getting jumped" in content_lower or "need help" in content_lower:
        await message.channel.send(f"{message.author.mention}, stay safe! If you need immediate assistance, please contact a staff member.")
    await bot.process_commands(message)

@tree.command(name="ping", description="Check the bot's latency")
async def ping(interaction: discord.Interaction):
    await interaction.response.send_message(f"Pong! Latency: {round(bot.latency * 1000)}ms")

@tree.command(name="hello", description="Say hello to the bot")
async def hello(interaction: discord.Interaction):
    await interaction.response.send_message(f"Hello, {interaction.user.mention}!")

def has_role(interaction: discord.Interaction, role_name: str):
    role = discord.utils.find(lambda r: r.name == role_name, interaction.user.roles)
    return role is not None

@tree.command(name="verify", description="Verify your Roblox username")
@app_commands.describe(RobloxUsername="Your Roblox username")
async def verify(interaction: discord.Interaction, RobloxUsername: str):
    verified_role = discord.utils.get(interaction.guild.roles, name="Verified")
    if verified_role not in interaction.user.roles:
        await interaction.response.send_message("You must have the Verified role to use this command.", ephemeral=True)
        return

    usernames = load_usernames()
    usernames[str(interaction.user.id)] = RobloxUsername
    save_usernames(usernames)
    await interaction.response.send_message(f"Your Roblox username '{RobloxUsername}' has been saved.", ephemeral=True)

@tree.command(name="ticket", description="Create a support ticket")
async def ticket(interaction: discord.Interaction):
    verified_role = discord.utils.get(interaction.guild.roles, name="Verified")
    if verified_role not in interaction.user.roles:
        await interaction.response.send_message("You must have the Verified role to use this command.", ephemeral=True)
        return

    guild = interaction.guild
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
        interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
        discord.utils.get(guild.roles, name="Staff"): discord.PermissionOverwrite(read_messages=True, send_messages=True),
    }

    existing_channel = discord.utils.get(guild.text_channels, name=f"ticket-{interaction.user.name.lower()}")
    if existing_channel:
        await interaction.response.send_message(f"You already have an open ticket: {existing_channel.mention}", ephemeral=True)
        return

    channel = await guild.create_text_channel(f"ticket-{interaction.user.name.lower()}", overwrites=overwrites, reason="Support ticket created")
    await interaction.response.send_message(f"Ticket created: {channel.mention}", ephemeral=True)

@tree.command(name="close", description="Close the current ticket")
async def close(interaction: discord.Interaction):
    staff_role = discord.utils.get(interaction.guild.roles, name="Staff")
    if staff_role not in interaction.user.roles:
        await interaction.response.send_message("You must have the Staff role to use this command.", ephemeral=True)
        return

    channel = interaction.channel
    if not channel.name.startswith("ticket-"):
        await interaction.response.send_message("This command can only be used in a ticket channel.", ephemeral=True)
        return

    await interaction.response.send_message("Closing ticket in 5 seconds...")
    await asyncio.sleep(5)
    await channel.delete(reason=f"Ticket closed by {interaction.user}")

bot.run(TOKEN)
